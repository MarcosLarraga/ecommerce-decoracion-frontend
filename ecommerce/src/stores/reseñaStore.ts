import { defineStore } from 'pinia';
import axios from 'axios';

export const useRese√±aStore = defineStore('rese√±a', {
  state: () => ({
    rese√±as: [] as any[], 
    promedioCalificacion: 0, 
  }),

  actions: {
    // Obtener todas las rese√±as de un producto
    async fetchRese√±asByProductoId(productoId: number) {
      try {
        const response = await axios.get(`http://localhost:5162/api/Rese√±a/producto/${productoId}`);
        this.rese√±as = response.data;
      } catch (error) {
        console.error("‚ùå Error obteniendo rese√±as:", error);
      }
    },

    // Obtener el promedio de calificaci√≥n de un producto
    async fetchPromedioCalificacion(productoId: number) {
      try {
        const response = await axios.get(`http://localhost:5162/api/Rese√±a/producto/${productoId}/promedio`);
        this.promedioCalificacion = response.data;
      } catch (error) {
        console.error("‚ùå Error obteniendo el promedio de calificaci√≥n:", error);
        this.promedioCalificacion = 0; // Evita errores en el frontend
      }      
    },

    // Agregar una rese√±a
    async agregarRese√±a(productoId: number, usuarioId: number, comentario: string, calificacion: number) {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          throw new Error("No hay token disponible. Inicia sesi√≥n.");
        }

        const response = await axios.post(
          "http://localhost:5162/api/Rese√±a",
          {
            productoId,
            usuarioId,
            comentario,
            calificacion
          },
          {
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json"
            }
          }
        );

        this.rese√±as.push(response.data);
        await this.fetchPromedioCalificacion(productoId);
      } catch (error) {
        console.error("‚ùå Error al agregar rese√±a:", error);
        throw new Error("No se pudo agregar la rese√±a.");
      }
    },

    // üîπ Nuevo m√©todo para eliminar rese√±as
    async eliminarRese√±a(rese√±aId: number) {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          throw new Error("No hay token disponible. Inicia sesi√≥n.");
        }

        await axios.delete(`http://localhost:5162/api/Rese√±a/${rese√±aId}`, {
          headers: {
            Authorization: `Bearer ${token}`,
          }
        });

        this.rese√±as = this.rese√±as.filter(r => r.id !== rese√±aId);
        console.log(`‚úÖ Rese√±a ${rese√±aId} eliminada correctamente`);
      } catch (error) {
        console.error("‚ùå Error al eliminar la rese√±a:", error);
        throw new Error("No se pudo eliminar la rese√±a.");
      }
    }
  }
});
